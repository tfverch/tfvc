{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset h1, .md-content__button { display: none; } Home Terraform version check (tfvc) is a reporting tool to identify available updates for providers and modules referenced in your Terraform code. It provides clear warning/failure output and resolution guidance for any issues it detects.","title":"Home"},{"location":"#home","text":"Terraform version check (tfvc) is a reporting tool to identify available updates for providers and modules referenced in your Terraform code. It provides clear warning/failure output and resolution guidance for any issues it detects.","title":"Home"},{"location":"basic/","text":"Basic Usage Prerequisutes This basic example assumes that you have a main.tf file in your current working directory configuring a version constraint for Terraform itself and two required providers, google and aws . For example: ./main.tf terraform { required_version = \"~> 1.0\" required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.0\" } google = { source = \"hashicorp/google\" version = \"~> 4.0\" } } } Running tfvc tfvc can be invoked for the current working directory using the following command. tfvc . And you should see output similar to the following. Examining the output Looking at the output in this example you can see that tfvc is failing because the hashicorp/aws provider is configured to use an outdated major version. In main.tf the aws provider version constraint is set to ~> 3.0 allowing any version matching 3.x.x to be installed. However, tfvc found a newer major version ( 4.34.0 ) available in the Terraform Registry for this provider so raised this issue. Display all checks including passes To display all checks in the console output you simply need to append the --include-passed or -a parameter when running tfvc , for example: tfvc . --include-passed Which should produce output similar to the following for this example.","title":"Basic"},{"location":"basic/#basic-usage","text":"","title":"Basic Usage"},{"location":"basic/#prerequisutes","text":"This basic example assumes that you have a main.tf file in your current working directory configuring a version constraint for Terraform itself and two required providers, google and aws . For example: ./main.tf terraform { required_version = \"~> 1.0\" required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.0\" } google = { source = \"hashicorp/google\" version = \"~> 4.0\" } } }","title":"Prerequisutes"},{"location":"basic/#running-tfvc","text":"tfvc can be invoked for the current working directory using the following command. tfvc . And you should see output similar to the following.","title":"Running tfvc"},{"location":"basic/#examining-the-output","text":"Looking at the output in this example you can see that tfvc is failing because the hashicorp/aws provider is configured to use an outdated major version. In main.tf the aws provider version constraint is set to ~> 3.0 allowing any version matching 3.x.x to be installed. However, tfvc found a newer major version ( 4.34.0 ) available in the Terraform Registry for this provider so raised this issue.","title":"Examining the output"},{"location":"basic/#display-all-checks-including-passes","text":"To display all checks in the console output you simply need to append the --include-passed or -a parameter when running tfvc , for example: tfvc . --include-passed Which should produce output similar to the following for this example.","title":"Display all checks including passes"},{"location":"getting-started/","text":"Getting Started Installation Install with Homebrew on MacOS or Linux. brew install tfverch/tfvc/tfvc Install with Go go install github.com/tfverch/tfvc@latest Usage tfvc will scan the specified directory and report on the version configuration for providers and modules. Info tfvc will return a non-zero exit status if if finds any issues, otherwise the exit status will be zero. The following example will run tfvc against the current working directory ( . ). tfvc . Docker usage As an alternative to installing and running tfvc on your system, you can run it in a Docker container. The following example will mount the current working directory ( $(pwd) ) in the container and run tfvc . docker run --rm -it -v \" $( pwd ) :/src\" tfverch/tfvc /src","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install with Homebrew on MacOS or Linux. brew install tfverch/tfvc/tfvc Install with Go go install github.com/tfverch/tfvc@latest","title":"Installation"},{"location":"getting-started/#usage","text":"tfvc will scan the specified directory and report on the version configuration for providers and modules. Info tfvc will return a non-zero exit status if if finds any issues, otherwise the exit status will be zero. The following example will run tfvc against the current working directory ( . ). tfvc .","title":"Usage"},{"location":"getting-started/#docker-usage","text":"As an alternative to installing and running tfvc on your system, you can run it in a Docker container. The following example will mount the current working directory ( $(pwd) ) in the container and run tfvc . docker run --rm -it -v \" $( pwd ) :/src\" tfverch/tfvc /src","title":"Docker usage"},{"location":"params/","text":"Parameters tfvc accepts the following parameters. For detailed usage examples see the Usage section. Parameter Type Description --include-passed, -a bool (default: false) Include passed checks in console output --include-prerelease, -e bool (default: false) Include prerelease versions in checks --ssh-private-key-path, -s, string (default: \"\") Path to private key to use for SSH module calls --ssh-private-key-pwd, -w string (default: \"\") Password for private key file if required You can also see this information in your shell by running the following command. tfvc --help","title":"Parameters"},{"location":"params/#parameters","text":"tfvc accepts the following parameters. For detailed usage examples see the Usage section. Parameter Type Description --include-passed, -a bool (default: false) Include passed checks in console output --include-prerelease, -e bool (default: false) Include prerelease versions in checks --ssh-private-key-path, -s, string (default: \"\") Path to private key to use for SSH module calls --ssh-private-key-pwd, -w string (default: \"\") Password for private key file if required You can also see this information in your shell by running the following command. tfvc --help","title":"Parameters"}]}